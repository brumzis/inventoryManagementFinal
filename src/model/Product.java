package model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;


/**
 * Defines product attributes used in the program, each product also has an associated parts list.
 *
 * Similar to the parts class, the product class consists of basic attributes defining each product.
 * Each product also has a list of associated parts, which can be modified by the user. The product class
 * has an ID (int), name (String), inventory level (int), Price (double), min (int), and a max (int). The
 * associated list of parts for each product is stored as an ObservableList.
 */
public class Product {

    public ObservableList<Part> associatedParts = null;        //declaration of variables
    private int productID;
    private String productName;
    private int productInventoryLevel;
    private double productPrice;
    private int productMin;
    private int productMax;

    // an empty master list of all products is created for display in the table for the end user

    public static ObservableList<Product> allProductsList = FXCollections.observableArrayList();


    /**
     * Constructor for the Product Class - includes an empty list of associated parts
     *
     * @param productID - held by a static integer. The ID is auto-generated by assigning the next available integer
     * @param productName - Name given by the user (String)
     * @param productInventoryLevel - Inventory level assigned by the user (int)
     * @param productPrice - Price assigned by the user (double)
     * @param min - minimum level assigned by the user (int)
     * @param max - maximum level assigned by the user (int)
     * @param associatedParts - list created by the user in a separate table (ObservableList)
     */
    public Product(int productID, String productName, int productInventoryLevel, double productPrice, int min, int max, ObservableList<Part> associatedParts) {
        this.productID = productID;
        this.productName = productName;
        this.productInventoryLevel = productInventoryLevel;
        this.productPrice = productPrice;
        productMin = min;
        productMax = max;
        this.associatedParts = associatedParts;
    }


    /**
     * Getter for the productID
     *
     * @return - returns the productID (int)
     */
    public int getProductID() {return productID;}


    /**
     * Setter for the productID
     *
     * @param productID - uses a static int as the next ID. User cannot assign/change
     */
    public void setProductID(int productID) {this.productID = productID;}


    /**
     * Getter for the productName
     *
     * @return - returns the productName (String)
     */
    public String getProductName() {return productName;}


    /**
     * Setter for the productName
     *
     * @param name - defined by the user (String)
     */
    public void setProductName(String name) {productName = name;}


    /**
     * Getter for the productInventoryLevel
     *
     * @return - returns the inventory level set by the user (int)
     */
    public int getProductInventoryLevel() {return productInventoryLevel;}


    /**
     * Setter for the productInventoryLevel
     *
     * @param inventory - defined by the user (int)
     */
    public void setProductInventoryLevel(int inventory) {productInventoryLevel = inventory; }


    /**
     * Getter for the productPrice
     *
     * @return - returns the price set by the user (double)
     */
    public double getProductPrice() {return productPrice;}


    /**
     * Setter for the productPrice
     *
     * @param price - price set by the user (double)
     */
    public void setProductPrice(double price) {productPrice = price;}


    /**
     * Getter for the productMin
     *
     * @return - returns the min inventory level set by the user (int)
     */
    public int getProductMin() {return productMin;}


    /**
     * Setter for the productMin
     *
     * @param min - min level set by the user (int)
     */
    public void setProductMin(int min) {productMin = min;}


    /**
     * Getter for the productMax
     *
     * @return - returns the max inventory level set by the user (int)
     */
    public int getProductMax() {return productMax;}


    /**
     * Setter for the productMax
     *
     * @param max - max inventory level set by the user (int)
     */
    public void setProductMax(int max) {productMax = max;}


    /**
     * Adds the newPart to the products list of associated parts
     *
     * @param newPart - Part supplied by the user for addition
     */
    public void addAssociatedPart(Part newPart) {
        associatedParts.add(newPart);
    }


    /**
     * Deletes the newPart from the products' list of associated parts
     *
     * @param newPart - Part supplied by the user for deletion
     */
    public void deleteAssociatedPart(Part newPart) {
        associatedParts.remove(newPart);
    }


    /**
     * Retrieves a list of all associated parts with a given product.
     *
     * @return - returns the ObservableList of associated parts.
     */
    public ObservableList<Part> getAllAssociatedParts () { return associatedParts;}


    /**
     * Loads a table of 4 products.
     *
     * The purpose of loading products immediately is to facilitate the testing of the program. Existing
     * products allow the program to be tested/manipulated faster. The user still has the option of
     * creating new products, and modifying existing ones
     */
    public static void loadProductsTable() {

        allProductsList.add(new Product(1000, "Giant Bicycle", 15, 299.99, 1, 50, Part.allPartsList));
        allProductsList.add(new Product(1001, "Scott Bicycle", 9, 199.99,1, 50, Part.allPartsList));
        allProductsList.add(new Product(1002, "GT Bike", 13, 999.99,1, 50, Part.allPartsList));
        allProductsList.add(new Product(1003, "Specialized", 5, 1899.99, 1, 50, Part.allPartsList));
    }


    /**
     * Returns the master list of all products
     *
     * @return - returns an ObservableList of all products available
     */
    public static ObservableList<Product> getAllProductsList() {
        return allProductsList;
    }
}
