package controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.InHouse;
import model.Outsourced;
import model.Part;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/**
 * Page where user can create a new part
 *
 * The Add Part Page gives the user a chance to create his/her own part. The user chooses a name,
 * inventory amount, price, min, max, and either a machine ID or a company name (depending on whether
 * the part is marked 'In-House' or 'Outsourced'. The part ID is auto-generated by incrementing a
 * static variable nextPartID
 * @see Part
 */
public class addPartForm implements Initializable {

    public TextField addPartID;                  //describes fields on the GUI
    public TextField addPartName;
    public TextField addPartInv;
    public TextField addPartPrice;
    public TextField addPartMax;
    public TextField addPartMachineID;
    public TextField addPartMin;

    public RadioButton addPartInHouseButton;           //radio buttons on the GUI
    public RadioButton addPartOutsourcedButton;

    public Button addPartSaveButton;              //Buttons on the GUI
    public Button addPartCancelButton;

    public Label addPartBottomLabel;            //label that can change depending on type of part
    public Label addPartErrorLabel;             //error message in case of bad user input

    public static int nextPartID = 5;         //static variable used to assign/increment part IDs
                                              //starts at 5 because 4 parts have already been created
                                              //and added to the table


    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        addPartErrorLabel.setText("");
    }


    /**
     * This radio button changes the bottom label to read 'Machine ID'
     *
     * @param actionEvent Radio Button select
     */
    public void selectInHouse(ActionEvent actionEvent) {
        addPartBottomLabel.setText("Machine ID");
    }


    /**
     * This radio button changes the bottom label to read 'Company Name'
     *
     * @param actionEvent Radio Button select
     */
    public void selectOutsourced(ActionEvent actionEvent) {
        addPartBottomLabel.setText("Company Name");
    }


    /**
     * The Button Click Event created a new Part with the user entered data.
     *
     * The Add Part Save Button takes the user entered data and creates a new object of either the
     * InHouse or Outsourced subclass. Both are subclasses of the superclass Part. The user data from the text fields
     * are run through try/catch blocks to catch exceptions caused by invalid user entries.
     *
     * @param actionEvent Button click
     * @throws IOException Leaving the name field blank. Entering the wrong data type. Min and Max errors
     * @see Part
     * @see InHouse
     * @see Outsourced
     */
    public void addPartSaveButtonClick(ActionEvent actionEvent) throws IOException {
        try {
            int id = nextPartID;
            String name = addPartName.getText();
            if (name == "")                              //throw an exception if the name field is blank
                throw new NumberFormatException();
            int inv = Integer.parseInt(addPartInv.getText());
            double price = Double.parseDouble(addPartPrice.getText());
            int min = Integer.parseInt(addPartMin.getText());
            int max = Integer.parseInt(addPartMax.getText());
            if (min > max || inv < min || inv > max)     //throw an exception if min, max, and inv are not correct
                throw new NumberFormatException();

            if (addPartInHouseButton.isSelected()) {             //creates an 'InHouse' object and returns to home screen
                int machineid = Integer.parseInt(addPartMachineID.getText());
                Part.allPartsList.add(new InHouse(id, name, inv, price, min, max, machineid));
                nextPartID++;
                Parent root = FXMLLoader.load(getClass().getResource("/view/inventoryHome.fxml"));
                Stage myStage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
                Scene myScene = new Scene(root, 1200, 500);
                myStage.setTitle("Inventory Management System - Main Menu");
                myStage.setScene(myScene);
                myStage.show();
            }

            if (addPartOutsourcedButton.isSelected()) {      //creates an 'Outsourced' object and returns to home screen
                String companyname = addPartMachineID.getText();
                Part.allPartsList.add(new Outsourced(id, name, inv, price, min, max, companyname));
                nextPartID++;
                Parent root = FXMLLoader.load(getClass().getResource("/view/inventoryHome.fxml"));
                Stage myStage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
                Scene myScene = new Scene(root, 1200, 500);
                myStage.setTitle("Inventory Management System - Main Menu");
                myStage.setScene(myScene);
                myStage.show();
            }
        } catch(NumberFormatException e) {
            addPartErrorLabel.setText("Fields cannot be blank. Numeric values must contain numbers." +
                    "       Min < Inv < Max");
        }
        catch(Exception e) {addPartErrorLabel.setText("An error has occurred!");}


    }

    /**
     * Cancel button returns to main menu without making any changes.
     *
     * @param actionEvent Button click
     * @throws IOException An incorrect file name/location will cause an exception.
     * @see inventoryHome
     */
    public void addPartCancelButtonClick(ActionEvent actionEvent) throws IOException {

        Parent root = FXMLLoader.load(getClass().getResource("/view/inventoryHome.fxml"));
        Stage myStage = (Stage)((Node)actionEvent.getSource()).getScene().getWindow();
        Scene myScene = new Scene(root, 1200, 500);
        myStage.setTitle("Inventory Management System - Main Menu");
        myStage.setScene(myScene);
        myStage.show();
    }
}
